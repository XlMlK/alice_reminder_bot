import os
import re
import sqlite3
import requests
import dateparser
from datetime import datetime
from flask import Flask, request
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))
THREAD_ID = os.environ.get("THREAD_ID")
THREAD_ID = int(THREAD_ID) if THREAD_ID and THREAD_ID.isdigit() else None
DATABASE_URL = "sqlite:///reminders.db"

# === –ù–ê–°–¢–†–û–ô–ö–ê PLANER ===
jobstores = {"default": SQLAlchemyJobStore(url=DATABASE_URL)}
scheduler = BackgroundScheduler(jobstores=jobstores)
scheduler.start()

# === Flask —Å–µ—Ä–≤–µ—Ä ===
app = Flask(__name__)

# --- Telegram utils ---
def send_to_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π message_thread_id)"""
    data = {"chat_id": CHAT_ID, "text": text}
    if THREAD_ID:
        data["message_thread_id"] = THREAD_ID
    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
        data=data
    )

# --- SQLite utils ---
def db_connect():
    conn = sqlite3.connect("reminders.db")
    conn.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            remind_time TEXT
        )
    """)
    return conn

def add_task_to_db(text, remind_time):
    conn = db_connect()
    conn.execute("INSERT INTO reminders (text, remind_time) VALUES (?, ?)", (text, remind_time.isoformat()))
    conn.commit()
    conn.close()

def delete_task_from_db(task_id):
    conn = db_connect()
    conn.execute("DELETE FROM reminders WHERE id=?", (task_id,))
    conn.commit()
    conn.close()

def get_all_tasks():
    conn = db_connect()
    cur = conn.cursor()
    cur.execute("SELECT id, text, remind_time FROM reminders ORDER BY remind_time ASC")
    tasks = cur.fetchall()
    conn.close()
    return tasks

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
def schedule_reminder(text, remind_time):
    scheduler.add_job(
        send_to_telegram,
        "date",
        run_date=remind_time,
        args=[f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}"],
        id=f"{text}_{remind_time.timestamp()}",
        replace_existing=False
    )
    add_task_to_db(text, remind_time)

# --- –†–∞–∑–±–æ—Ä –¥–∞—Ç—ã –∏ —Ç–µ–∫—Å—Ç–∞ ---
def extract_time_and_text(command: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ—Ä–∞–∑—ã."""
    task_text = re.sub(r"^–Ω–∞–ø–æ–º–Ω–∏( –º–Ω–µ)?", "", command).strip()
    parsed_time = dateparser.parse(
        task_text,
        languages=["ru"],
        settings={"PREFER_DATES_FROM": "future"}
    )
    return task_text, parsed_time

# --- –ê–ª–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@app.route("/alice", methods=["POST"])
def handle_alice():
    data = request.json
    command = data["request"]["command"].lower().strip()
    task_text, remind_time = extract_time_and_text(command)

    if not remind_time:
        return alice_response("–ù–µ –ø–æ–Ω—è–ª–∞, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å. –ü–æ–≤—Ç–æ—Ä–∏ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.", end_session=False)

    cleaned_text = re.sub(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|—á–µ—Ä–µ–∑|–≤|—á–µ—Ä–µ–∑|–¥–Ω—è|—á–∞—Å[–∞—É–µ]?)\b.*", "", task_text).strip()
    if not cleaned_text:
        cleaned_text = task_text

    schedule_reminder(cleaned_text, remind_time)
    send_to_telegram(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{cleaned_text}¬ª –Ω–∞ {remind_time.strftime('%d.%m %H:%M')}")
    return alice_response(f"–•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é {cleaned_text} {remind_time.strftime('%d.%m –≤ %H:%M')}")

def alice_response(text, end_session=True):
    return {"response": {"text": text, "end_session": end_session}, "version": "1.0"}

# --- Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@app.route(f"/bot/{TELEGRAM_TOKEN}", methods=["POST"])
def handle_telegram():
    data = request.json
    message = data.get("message", {})
    text = message.get("text", "")
    chat_id = message["chat"]["id"]

    if chat_id != CHAT_ID:
        return "ignored"

    if text.startswith("/start"):
        send_menu(chat_id)
    elif text.startswith("/menu"):
        send_menu(chat_id)
    elif text.startswith("/list"):
        show_tasks()
    elif text.startswith("/delete"):
        delete_task_command(text)
    elif text.startswith("/status"):
        send_to_telegram("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω. –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è.")
    elif text.startswith("/add"):
        send_to_telegram("üóì –ù–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –∑–∞–≤—Ç—Ä–∞ –≤ 9 —É—Ç—Ä–∞")
    elif text.startswith("/"):
        send_to_telegram("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /menu.")
    else:
        add_task_via_text(text)

    return "ok"

# --- Telegram –ø–æ–¥—Ñ—É–Ω–∫—Ü–∏–∏ ---
def send_menu(chat_id):
    menu = (
        "üìñ –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
        "/add ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/delete [id] ‚Äì —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/status ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "/menu ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
    )
    data = {"chat_id": chat_id, "text": menu}
    if THREAD_ID:
        data["message_thread_id"] = THREAD_ID
    requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data=data)

def show_tasks():
    tasks = get_all_tasks()
    if not tasks:
        send_to_telegram("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        msg = "üìã –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
        for tid, ttext, ttime in tasks:
            dt = datetime.fromisoformat(ttime)
            msg += f"{tid}. {ttext} ‚Äî {dt.strftime('%d.%m %H:%M')}\n"
        send_to_telegram(msg)

def delete_task_command(text):
    parts = text.split()
    if len(parts) < 2:
        send_to_telegram("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: /delete 3")
    else:
        try:
            task_id = int(parts[1])
            delete_task_from_db(task_id)
            send_to_telegram(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {task_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception:
            send_to_telegram("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")

def add_task_via_text(text):
    if text.lower().startswith(("–¥–æ–±–∞–≤—å", "–Ω–∞–ø–æ–º–Ω–∏", "/add")):
        task_text, remind_time = extract_time_and_text(text)
        if not remind_time:
            send_to_telegram("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /add –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –∑–∞–≤—Ç—Ä–∞ –≤ 10.")
            return
        cleaned_text = re.sub(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|—á–µ—Ä–µ–∑|–≤|—á–µ—Ä–µ–∑|–¥–Ω—è|—á–∞—Å[–∞—É–µ]?)\b.*", "", task_text).strip()
        if not cleaned_text:
            cleaned_text = task_text
        schedule_reminder(cleaned_text, remind_time)
        send_to_telegram(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ¬´{cleaned_text}¬ª –Ω–∞ {remind_time.strftime('%d.%m %H:%M')}")
    else:
        send_to_telegram("–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@app.route("/")
def index():
    return "ü§ñ Reminder –±–æ—Ç –∏ –Ω–∞–≤—ã–∫ –ê–ª–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)

